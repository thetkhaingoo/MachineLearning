getwd()
ls()
read.csv("/pml-training.csv")
read.csv("pml-training.csv")
pml = read.csv("pml-training.csv")
summary(pml)
dim(pml)
head(pml$raw_timestamp_part_1)
head(pml$raw_timestamp_part_2)
library(caret)
inTrain= createDataPartition(y=pml$classe,p=0.7,list=F)
training = pml[inTrain,]
testing = pml[-inTrain,]
modFit = train(classe ~., data=training,method="rf",prox=TRUE)
modFit = train(classe ~., data=training,method="rf",prox=TRUE)
pml = read.csv("pml-training.csv")
itest <- data.frame(v1=c(1,1,2,1,2,1),v2=c(NA,1,2,1,2,NA))
itest
itest[,colSums(is.na(itest))==0]
dim(itest)
itest
itest = itest[,colSums(is.na(itest))==0]
itest
dim(itest)
itest = pml[,colSums(is.na(pml))==0]
dim(itest)
head(itest)
pmltest = read.csv("pml-testing.csv")
itest = pmltest[,colSums(is.na(pmltest))==0]
dim(itest)
colSums(is.na(pml))
names(colSums(is.na(pml))==0)
ncols(colSums(is.na(pml))==0)
ncol(colSums(is.na(pml))==0)
colSums(is.na(pml))==0
nacols = colSums(is.na(pml))==0
dim(pml[,nacols])
dim(pmltest[,nacols])
nzv = nearZeroVar(pml,saveMetrics=T)
library(caret)
nzv = nearZeroVar(pml,saveMetrics=T)
nzv
nzv[nzv$nzv,][1:10,]
dim(nzv)
vpml = pml[,-nzv$nzv]
vpml
dim(vpml)
pml[,-nzv$nzv]
dim(pml[,-nzv$nzv])
dim(pml[,-nzv])
vpml= pml[,-nzv]
nzv = nearZeroVar(pml)
fpml = pml[,-nzv]
fpml
nacols
sum(nacols)
pml = pml[,nacols]
dim(pml)
nzv = nearZeroVar(pml)
fpml = pml[,-nzv]
dim(fpml)
inTrain = createDataPartition(y=fpml$classe,p=0.7,list=F)
training <- fpml[inTrain,]
testing <- fpml[-inTrain,]
modFit = train(classe ~ .,data=training,method="rf",prox=TRUE)
modFit
library(randomForest)
modFit = train(classe ~ .,data=training,method="rf",prox=TRUE)
modFit
modFit = train(classe ~ .,data=training,method="glm")
modFit = train(classe ~ .,method="lm",data=training)
head(trainin)
head(training)
training[1:10,1:5]
training[1:10,1:6]
training[1:10,1:7]
training[1:10,7:]
dim(training)
training[1:10,7:59]
modFit = train(classe ~ training[,7:58],data=training,method="glm")
modFit = train(classe ~ training[,58],data=training,method="glm")
modFit = train(classe ~ training[,7:58],data=training,method="lm")
modFit = train(classe ~ training[,7]+training[,8],data=training,method="lm")
modFit = train(classe ~. ,data=training,method="gbm",verbose=F)
modFit
savehistory("C:/Users/thet/Desktop/history.txt")
